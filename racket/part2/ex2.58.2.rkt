#lang racket

;; Exercise 2.58 http://sarabander.github.io/sicp/html/2_002e3.xhtml#Exercise-2_002e58

;; 2. (x + 3 * (x + y + 2))
(define (single-or-list lst)
  (if (= (length lst) 1)
      (car lst)
      lst))
(define (left-operand s op)
  (single-or-list
    (take s (index-of s op))))
(define (right-operand s op)
  (single-or-list
    (list-tail s (+ (index-of s op) 1))))

(define (sum? x)
  (and (list? x)
       (> (length x) 2)
       (memq '+ (cdr x))))
(define (addend s)
  (left-operand s '+))
(define (augend s)
  (right-operand s '+))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) 
          (+ a1 a2))
        (else
          (let ((oprd (λ (x) (if (list? x)
                                 x
                                 (list x)))))
            (append (oprd a1) '(+) (oprd a2))))))
(module+ test
  (require rackunit)
  (check-not-false (sum? '(x * y + 3 + 4)))
  (check-false (sum? '(x * y * 3)))
  (check-equal? (addend '(x + y * 3 + 4)) 'x)
  (check-equal? (addend '(x * y + 3 + 4)) '(x * y))
  (check-equal? (augend '(x * y * 3 + 4)) 4)
  (check-equal? (augend '(x * y + 3 + 4)) '(3 + 4))
  (check-equal? (make-sum 'x 'y) '(x + y))
  (check-equal? (make-sum '(x * y) 0) '(x * y))
  (check-equal? (make-sum 0 '(x * y)) '(x * y))
  (check-equal? (make-sum 4 3) 7)
  (check-equal? (make-sum '(x * y) '(3 + y)) '(x * y + 3 + y))
  (check-equal? (make-sum '(x + x * y) '(3 + y)) '(x + x * y + 3 + y))
  )

(define (product? x)
  (and (list? x)
       (> (length x) 2)
       (eq? (cadr x) '*)
       (not (sum? x))))
(define (multiplier p) (car p))
(define (multiplicand p) (single-or-list (cddr p)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) 
             (=number? m2 0)) 
         0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) 
         (* m1 m2))
        (else
          (let ((oprd (λ (x) (if (or (not (list? x))
                                     (sum? x))
                                 (list x)
                                 x))))
            (append (oprd m1) '(*) (oprd m2))))))
(module+ test
  (check-false (product? '(x * y + 3 + 4)))
  (check-true (product? '(x * y * 3)))
  (check-true (product? '(x * (y + 3))))
  (check-equal? (multiplier '(x * y * 3)) 'x)
  (check-equal? (multiplier '((x + 3) * y)) '(x + 3))
  (check-equal? (multiplier '((x * y + 3) * 4)) '(x * y + 3))
  (check-equal? (multiplicand '(x * y)) 'y)
  (check-equal? (multiplicand '(x * y * 3)) '(y * 3))
  (check-equal? (multiplicand '(x * (y + 3))) '(y + 3))
  (check-equal? (multiplicand '(x * (4 * y + 3))) '(4 * y + 3))
  (check-equal? (make-product 'x 'y) '(x * y))
  (check-equal? (make-product '(x * y) 0) '0)
  (check-equal? (make-product 1 '(x + y)) '(x + y))
  (check-equal? (make-product 4 3) 12)
  (check-equal? (make-product '(x * y) 3) '(x * y * 3))
  (check-equal? (make-product '(x * y) '(3 + y)) '(x * y * (3 + y)))
  (check-equal? (make-product '(x + x * y) '(3 * y)) '((x + x * y) * 3 * y))
  )

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
          (if (same-variable? exp var) 1 0))
        ((sum? exp)
          (make-sum (deriv (addend exp) var)
                    (deriv (augend exp) var)))
        ((product? exp)
          (make-sum
            (make-product
              (multiplier exp)
              (deriv (multiplicand exp) var))
            (make-product 
              (deriv (multiplier exp) var)
              (multiplicand exp))))
        (else (error "unknown expression 
                      type: DERIV" exp))))
(module+ test
  (check-equal? (deriv '(5 + x) 'x) 1)
  (check-equal? (deriv '(y * x) 'x) 'y)
  (check-equal? (deriv '(x + 3 + 3 * (x + y + 2)) 'x) 4)
  (check-equal? (deriv '(x * y * (x + 3)) 'x) '(x * y + y * (x + 3)))
  (check-equal? (deriv '(x * y * (x + 3) + y * x) 'x) '(x * y + y * (x + 3) + y)))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))

(provide =number?)
(define (=number? exp num)
  (and (number? exp) (= exp num)))

